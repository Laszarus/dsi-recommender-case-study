{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import pandas as pd\n",
    "import pyspark\n",
    "from pyspark.sql import SparkSession\n",
    "import numpy as np\n",
    "from pyspark.ml.evaluation import RegressionEvaluator\n",
    "from pyspark.ml.recommendation import ALS\n",
    "from collections import defaultdict\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-6db8fad3ea6e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpd_ratings\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'../data/movies/ml-20m/ratings.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpd_ratings\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd_ratings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'timestamp'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    "pd_ratings= pd.read_csv('../data/movies/ratings.csv')\n",
    "pd_ratings=pd_ratings.drop('timestamp', axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "spark = SparkSession.builder.getOrCreate()\n",
    "spark_ratings= spark.createDataFrame(pd_ratings) \n",
    "train, test = spark_ratings.randomSplit([0.8, 0.2], seed=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxIter_list = np.linspace(10,100, num=10)\n",
    "maxIter_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "rmse_dict= defaultdict(lambda: 'No_value')\n",
    "\n",
    "rank_list = np.linspace(1,20, num=20)\n",
    "maxIter_list = np.linspace(10,100, num=10)\n",
    "regParam_list=np.linspace(.05,1, num=20)\n",
    "numblock_list= np.linspace(5, 50, num=10)\n",
    "seed = 42\n",
    "cold_list='drop'\n",
    "checkpoint_list=[10,20,50,100,1000, 10000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ALS(self, rank=10, maxIter=10,\n",
    "    regParam=0.1, numUserBlocks=10, \n",
    "    numItemBlocks=10, \n",
    "    implicitPrefs=false, \n",
    "    alpha=1.0,\n",
    "    userCol=\"user\", \n",
    "    itemCol=\"item\",\n",
    "    seed=None, ratingCol=\"rating\",\n",
    "    nonnegative=false,\n",
    "    checkpointInterval=10, \n",
    "    intermediateStorageLevel=\"MEMORY_AND_DISK\",\n",
    "    finalStorageLevel=\"MEMORY_AND_DISK\", \n",
    "    coldStartStrategy=\"nan\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.902558768118035\n",
      "0.902558768118035\n",
      "0.902558768118035\n",
      "0.9025587681180351\n",
      "0.9025587681180351\n",
      "0.902558768118035\n",
      "0.9034250492781775\n",
      "0.9034250492781775\n",
      "0.9034250492781774\n",
      "0.9034250492781774\n",
      "0.9034250492781775\n",
      "0.9034250492781774\n",
      "0.9030386539953867\n",
      "0.9030386539953867\n",
      "0.9030386539953867\n",
      "0.9030386539953867\n",
      "0.9030386539953869\n",
      "0.9030386539953867\n",
      "0.9041627433466949\n",
      "0.9041627433466949\n",
      "0.904162743346695\n",
      "0.9041627433466949\n",
      "0.904162743346695\n",
      "0.9041627433466949\n",
      "0.9039977163254037\n",
      "0.9039977163254037\n",
      "0.9039977163254037\n",
      "0.9039977163254037\n",
      "0.9039977163254037\n",
      "0.9039977163254037\n",
      "0.9031992186810075\n",
      "0.9031992186810075\n",
      "0.9031992186810075\n",
      "0.9031992186810075\n",
      "0.9031992186810075\n",
      "0.9031992186810075\n",
      "0.9038830387170398\n",
      "0.9038830387170398\n",
      "0.9038830387170398\n",
      "0.9038830387170398\n",
      "0.9038830387170399\n",
      "0.9038830387170398\n",
      "0.9038492262707636\n",
      "0.9038492262707636\n",
      "0.9038492262707636\n",
      "0.9038492262707636\n",
      "0.9038492262707635\n",
      "0.9038492262707636\n",
      "0.9034117625818329\n",
      "0.903411762581833\n",
      "0.9034117625818329\n",
      "0.9034117625818329\n",
      "0.903411762581833\n",
      "0.903411762581833\n",
      "0.90280064979492\n",
      "0.90280064979492\n",
      "0.90280064979492\n",
      "0.9028006497949199\n",
      "0.90280064979492\n",
      "0.90280064979492\n",
      "0.9054681602543639\n",
      "0.9054681602543638\n",
      "0.9054681602543638\n",
      "0.9054681602543639\n",
      "0.9054681602543638\n",
      "0.9054681602543639\n",
      "0.9066567129006441\n",
      "0.9066567129006441\n",
      "0.9066567129006441\n",
      "0.9066567129006441\n",
      "0.906656712900644\n",
      "0.9066567129006441\n",
      "0.9063778174160594\n",
      "0.9063778174160594\n",
      "0.9063778174160594\n",
      "0.9063778174160594\n",
      "0.9063778174160594\n",
      "0.9063778174160594\n",
      "0.9091806414111786\n",
      "0.9091806414111786\n",
      "0.9091806414111785\n",
      "0.9091806414111785\n",
      "0.9091806414111785\n",
      "0.9091806414111785\n",
      "0.908553607267255\n",
      "0.908553607267255\n",
      "0.9085536072672551\n",
      "0.9085536072672551\n",
      "0.9085536072672551\n",
      "0.908553607267255\n",
      "0.9065458627963366\n",
      "0.9065458627963366\n",
      "0.9065458627963366\n",
      "0.9065458627963366\n",
      "0.9065458627963366\n",
      "0.9065458627963366\n",
      "0.9088882349960901\n",
      "0.9088882349960902\n",
      "0.9088882349960902\n",
      "0.9088882349960901\n",
      "0.9088882349960901\n",
      "0.9088882349960901\n",
      "0.9081160589280182\n",
      "0.908116058928018\n",
      "0.9081160589280182\n",
      "0.908116058928018\n",
      "0.9081160589280182\n",
      "0.9081160589280182\n",
      "0.9084773127175162\n",
      "0.9084773127175163\n",
      "0.9084773127175162\n",
      "0.9084773127175162\n",
      "0.9084773127175163\n",
      "0.9084773127175162\n",
      "0.9059791510929476\n",
      "0.9059791510929477\n",
      "0.9059791510929477\n",
      "0.9059791510929476\n",
      "0.9059791510929476\n",
      "0.9059791510929477\n",
      "0.9104785420613094\n",
      "0.9104785420613094\n",
      "0.9104785420613094\n",
      "0.9104785420613094\n",
      "0.9104785420613094\n",
      "0.9104785420613094\n",
      "0.9116689917428425\n",
      "0.9116689917428425\n",
      "0.9116689917428425\n",
      "0.9116689917428423\n",
      "0.9116689917428423\n",
      "0.9116689917428423\n",
      "0.9115406323430821\n",
      "0.9115406323430821\n",
      "0.911540632343082\n",
      "0.911540632343082\n",
      "0.9115406323430821\n",
      "0.911540632343082\n",
      "0.9152862363068465\n",
      "0.9152862363068465\n",
      "0.9152862363068465\n",
      "0.9152862363068465\n",
      "0.9152862363068465\n",
      "0.9152862363068465\n",
      "0.9143641094990358\n",
      "0.9143641094990358\n",
      "0.9143641094990358\n",
      "0.9143641094990358\n",
      "0.9143641094990358\n",
      "0.9143641094990358\n",
      "0.9116922868675368\n",
      "0.9116922868675368\n",
      "0.9116922868675368\n",
      "0.9116922868675368\n",
      "0.9116922868675368\n",
      "0.9116922868675368\n",
      "0.915064982967447\n",
      "0.9150649829674471\n",
      "0.9150649829674471\n",
      "0.915064982967447\n",
      "0.9150649829674471\n",
      "0.9150649829674471\n",
      "0.9137418048769872\n",
      "0.9137418048769871\n",
      "0.9137418048769872\n",
      "0.9137418048769872\n",
      "0.9137418048769872\n",
      "0.9137418048769872\n",
      "0.9148513357392906\n",
      "0.9148513357392906\n",
      "0.9148513357392906\n",
      "0.9148513357392906\n",
      "0.9148513357392906\n",
      "0.9148513357392906\n",
      "0.9110917218600132\n",
      "0.9110917218600132\n",
      "0.9110917218600132\n",
      "0.9110917218600132\n",
      "0.9110917218600132\n",
      "0.9110917218600133\n",
      "0.9185257270192939\n",
      "0.9185257270192939\n",
      "0.9185257270192939\n",
      "0.9185257270192939\n",
      "0.9185257270192939\n",
      "0.9185257270192939\n",
      "0.9195141740497621\n",
      "0.9195141740497621\n",
      "0.9195141740497621\n",
      "0.9195141740497621\n",
      "0.9195141740497621\n",
      "0.9195141740497621\n",
      "0.9195153905182065\n",
      "0.9195153905182065\n",
      "0.9195153905182064\n",
      "0.9195153905182064\n",
      "0.9195153905182065\n",
      "0.9195153905182065\n",
      "0.9234678169564441\n",
      "0.9234678169564441\n",
      "0.9234678169564441\n",
      "0.9234678169564441\n",
      "0.9234678169564441\n",
      "0.9234678169564441\n",
      "0.9224424807927062\n",
      "0.9224424807927062\n",
      "0.9224424807927062\n",
      "0.9224424807927062\n",
      "0.9224424807927062\n",
      "0.9224424807927062\n",
      "0.9196417846972543\n",
      "0.9196417846972542\n",
      "0.9196417846972542\n",
      "0.9196417846972542\n",
      "0.9196417846972542\n",
      "0.9196417846972542\n",
      "0.9233281417859319\n",
      "0.9233281417859321\n",
      "0.9233281417859319\n",
      "0.9233281417859319\n",
      "0.9233281417859319\n",
      "0.9233281417859319\n",
      "0.921751294707979\n",
      "0.921751294707979\n",
      "0.921751294707979\n",
      "0.921751294707979\n",
      "0.9217512947079789\n",
      "0.921751294707979\n",
      "0.923294017490448\n",
      "0.923294017490448\n",
      "0.923294017490448\n",
      "0.923294017490448\n",
      "0.923294017490448\n",
      "0.923294017490448\n",
      "0.9190956693162206\n",
      "0.9190956693162206\n",
      "0.9190956693162206\n",
      "0.9190956693162206\n",
      "0.9190956693162206\n",
      "0.9190956693162206\n",
      "0.9299232806003472\n",
      "0.9299232806003472\n",
      "0.9299232806003472\n",
      "0.9299232806003472\n",
      "0.9299232806003472\n",
      "0.9299232806003472\n",
      "0.9306083439743391\n",
      "0.9306083439743391\n",
      "0.9306083439743391\n",
      "0.9306083439743391\n",
      "0.9306083439743391\n",
      "0.9306083439743391\n",
      "0.9306920872699764\n",
      "0.9306920872699764\n",
      "0.9306920872699764\n",
      "0.9306920872699764\n",
      "0.9306920872699764\n",
      "0.9306920872699764\n",
      "0.9342579162270116\n",
      "0.9342579162270116\n",
      "0.9342579162270116\n",
      "0.9342579162270116\n",
      "0.9342579162270116\n",
      "0.9342579162270116\n",
      "0.9332897435726559\n",
      "0.9332897435726559\n",
      "0.9332897435726559\n",
      "0.9332897435726559\n",
      "0.9332897435726559\n",
      "0.9332897435726559\n",
      "0.9307889648923178\n",
      "0.9307889648923178\n",
      "0.9307889648923178\n",
      "0.9307889648923178\n",
      "0.9307889648923175\n",
      "0.9307889648923175\n",
      "0.9341863903397798\n",
      "0.9341863903397798\n",
      "0.9341863903397801\n",
      "0.9341863903397798\n",
      "0.9341863903397801\n",
      "0.9341863903397798\n",
      "0.9326336133390056\n",
      "0.9326336133390057\n",
      "0.9326336133390056\n",
      "0.9326336133390056\n",
      "0.9326336133390056\n",
      "0.9326336133390056\n",
      "0.9342740407942267\n",
      "0.9342740407942267\n",
      "0.9342740407942267\n",
      "0.9342740407942267\n",
      "0.9342740407942267\n",
      "0.9342740407942267\n",
      "0.9303534826770252\n",
      "0.9303534826770252\n",
      "0.9303534826770252\n",
      "0.9303534826770252\n",
      "0.9303534826770252\n",
      "0.9303534826770252\n",
      "0.944528335378388\n",
      "0.944528335378388\n",
      "0.944528335378388\n",
      "0.9445283353783882\n",
      "0.9445283353783882\n",
      "0.9445283353783882\n",
      "0.9449160103022334\n",
      "0.9449160103022334\n",
      "0.9449160103022334\n",
      "0.9449160103022334\n",
      "0.9449160103022334\n",
      "0.9449160103022334\n",
      "0.9450298133133852\n",
      "0.9450298133133852\n",
      "0.9450298133133854\n",
      "0.9450298133133854\n",
      "0.9450298133133854\n",
      "0.9450298133133854\n",
      "0.947862726063099\n",
      "0.947862726063099\n",
      "0.947862726063099\n",
      "0.947862726063099\n",
      "0.947862726063099\n",
      "0.947862726063099\n",
      "0.9470556812100465\n",
      "0.9470556812100465\n",
      "0.9470556812100465\n",
      "0.9470556812100465\n",
      "0.9470556812100465\n",
      "0.9470556812100465\n",
      "0.9450977322261691\n",
      "0.9450977322261691\n",
      "0.9450977322261691\n",
      "0.9450977322261691\n",
      "0.9450977322261691\n",
      "0.9450977322261691\n",
      "0.9478372608380313\n",
      "0.9478372608380313\n",
      "0.9478372608380313\n",
      "0.9478372608380313\n",
      "0.9478372608380313\n",
      "0.9478372608380313\n",
      "0.9465061801760484\n",
      "0.9465061801760484\n",
      "0.9465061801760484\n",
      "0.9465061801760484\n",
      "0.9465061801760484\n",
      "0.9465061801760484\n",
      "0.9479839545170974\n",
      "0.9479839545170974\n",
      "0.9479839545170974\n",
      "0.9479839545170974\n",
      "0.9479839545170974\n",
      "0.9479839545170974\n",
      "0.944790520391905\n",
      "0.944790520391905\n",
      "0.944790520391905\n",
      "0.944790520391905\n",
      "0.944790520391905\n",
      "0.944790520391905\n",
      "0.9619685451721551\n",
      "0.9619685451721551\n",
      "0.9619685451721551\n",
      "0.9619685451721551\n",
      "0.9619685451721548\n",
      "0.9619685451721548\n",
      "0.962131953978775\n",
      "0.962131953978775\n",
      "0.9621319539787748\n",
      "0.962131953978775\n",
      "0.962131953978775\n",
      "0.962131953978775\n",
      "0.9622369315730578\n",
      "0.9622369315730578\n",
      "0.9622369315730578\n",
      "0.9622369315730578\n",
      "0.9622369315730576\n",
      "0.9622369315730578\n",
      "0.9642508948340097\n",
      "0.9642508948340097\n",
      "0.9642508948340099\n",
      "0.9642508948340099\n",
      "0.9642508948340099\n",
      "0.9642508948340099\n",
      "0.963645671992501\n",
      "0.963645671992501\n",
      "0.963645671992501\n",
      "0.963645671992501\n",
      "0.963645671992501\n",
      "0.963645671992501\n",
      "0.9622803757174281\n",
      "0.9622803757174281\n",
      "0.9622803757174283\n",
      "0.9622803757174281\n",
      "0.9622803757174281\n",
      "0.9622803757174283\n",
      "0.964249981571133\n",
      "0.964249981571133\n",
      "0.964249981571133\n",
      "0.964249981571133\n",
      "0.964249981571133\n",
      "0.964249981571133\n",
      "0.9632324762839587\n",
      "0.9632324762839587\n",
      "0.9632324762839587\n",
      "0.9632324762839587\n",
      "0.9632324762839587\n",
      "0.9632324762839587\n",
      "0.9644055388517037\n",
      "0.9644055388517037\n",
      "0.9644055388517035\n",
      "0.9644055388517035\n",
      "0.9644055388517037\n",
      "0.9644055388517037\n",
      "0.9620878833503587\n",
      "0.9620878833503587\n",
      "0.9620878833503587\n",
      "0.9620878833503587\n",
      "0.9620878833503587\n",
      "0.9620878833503587\n",
      "0.9818475429398681\n",
      "0.9818475429398681\n",
      "0.9818475429398681\n",
      "0.9818475429398681\n",
      "0.9818475429398681\n",
      "0.9818475429398681\n",
      "0.9818750006976572\n",
      "0.9818750006976572\n",
      "0.9818750006976572\n",
      "0.9818750006976572\n",
      "0.9818750006976572\n",
      "0.9818750006976572\n",
      "0.9819526427752632\n",
      "0.9819526427752632\n",
      "0.9819526427752632\n",
      "0.9819526427752632\n",
      "0.9819526427752632\n",
      "0.9819526427752632\n",
      "0.9832455288590897\n",
      "0.9832455288590897\n",
      "0.9832455288590897\n",
      "0.9832455288590897\n",
      "0.9832455288590897\n",
      "0.9832455288590897\n",
      "0.9828325008545031\n",
      "0.9828325008545031\n",
      "0.9828325008545031\n",
      "0.9828325008545031\n",
      "0.9828325008545031\n",
      "0.9828325008545031\n",
      "0.9819779522761808\n",
      "0.9819779522761806\n",
      "0.9819779522761808\n",
      "0.9819779522761808\n",
      "0.9819779522761806\n",
      "0.9819779522761808\n",
      "0.983253530386551\n",
      "0.9832535303865512\n",
      "0.983253530386551\n",
      "0.9832535303865512\n",
      "0.983253530386551\n",
      "0.9832535303865512\n",
      "0.9825501577742236\n",
      "0.9825501577742236\n",
      "0.9825501577742236\n",
      "0.9825501577742236\n",
      "0.9825501577742236\n",
      "0.9825501577742236\n",
      "0.9833874630705765\n",
      "0.9833874630705765\n",
      "0.9833874630705765\n",
      "0.9833874630705765\n",
      "0.9833874630705765\n",
      "0.9833874630705765\n",
      "0.9818714841600334\n",
      "0.9818714841600334\n",
      "0.9818714841600334\n",
      "0.9818714841600334\n",
      "0.9818714841600334\n",
      "0.9818714841600334\n",
      "1.0038475239729514\n",
      "1.0038475239729514\n",
      "1.0038475239729514\n",
      "1.0038475239729512\n",
      "1.0038475239729512\n",
      "1.0038475239729514\n",
      "1.0038104780331605\n",
      "1.0038104780331605\n",
      "1.0038104780331605\n",
      "1.0038104780331605\n",
      "1.0038104780331605\n",
      "1.0038104780331607\n",
      "1.0038584687196621\n",
      "1.0038584687196621\n",
      "1.0038584687196621\n",
      "1.0038584687196621\n",
      "1.0038584687196621\n",
      "1.003858468719662\n",
      "1.00460943292695\n",
      "1.00460943292695\n",
      "1.00460943292695\n",
      "1.00460943292695\n",
      "1.00460943292695\n",
      "1.00460943292695\n",
      "1.0043512227120126\n",
      "1.0043512227120126\n",
      "1.0043512227120126\n",
      "1.0043512227120126\n",
      "1.0043512227120126\n",
      "1.0043512227120126\n",
      "1.0038718209597193\n",
      "1.0038718209597193\n",
      "1.0038718209597193\n",
      "1.0038718209597193\n",
      "1.0038718209597193\n",
      "1.0038718209597193\n",
      "1.0046177627488495\n",
      "1.0046177627488493\n",
      "1.0046177627488493\n",
      "1.0046177627488493\n",
      "1.0046177627488493\n",
      "1.0046177627488493\n",
      "1.0041745091553798\n",
      "1.0041745091553795\n",
      "1.0041745091553798\n",
      "1.0041745091553795\n",
      "1.0041745091553798\n",
      "1.0041745091553795\n",
      "1.0047179920591653\n",
      "1.0047179920591653\n",
      "1.0047179920591653\n",
      "1.0047179920591653\n",
      "1.0047179920591653\n",
      "1.0047179920591653\n",
      "1.0038213816185602\n",
      "1.0038213816185604\n",
      "1.0038213816185602\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-73-a87c684254fd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m                                        \u001b[0mrank\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrank\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxIter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmaxIter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumUserBlocks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumblock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumItemBlocks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumblock\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m                                        checkpointInterval=checkpoint,regParam= regParam)\n\u001b[0;32m----> 9\u001b[0;31m                     \u001b[0mratings\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfactor_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m                     \u001b[0mpredict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mratings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m                     \u001b[0mrmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/spark/python/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    130\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m             raise ValueError(\"Params must be either a param map or a list/tuple of param maps, \"\n",
      "\u001b[0;32m/usr/local/spark/python/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    293\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m         \u001b[0mjava_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjava_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_copyValues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/spark/python/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit_java\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    290\u001b[0m         \"\"\"\n\u001b[1;32m    291\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transfer_params_to_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 292\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_java_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    293\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1253\u001b[0m             \u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEND_COMMAND_PART\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1254\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1255\u001b[0;31m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1256\u001b[0m         return_value = get_return_value(\n\u001b[1;32m   1257\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n",
      "\u001b[0;32m/usr/local/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command, retry, binary)\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0mconnection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    984\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 985\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconnection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    986\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    987\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_connection_guard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command)\u001b[0m\n\u001b[1;32m   1150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1152\u001b[0;31m             \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msmart_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Answer received: {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRETURN_MESSAGE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "for rank in rank_list:\n",
    "    for maxIter in maxIter_list:\n",
    "        for regParam in regParam_list:\n",
    "            for numblock in numblock_list:\n",
    "                for checkpoint in checkpoint_list:\n",
    "                    factor_model = ALS(itemCol='movieId',userCol='userId',ratingCol='rating',nonnegative=True,coldStartStrategy='drop',\n",
    "                                       rank=rank, maxIter=maxIter, numUserBlocks=numblock, numItemBlocks=numblock,\n",
    "                                       checkpointInterval=checkpoint,regParam= regParam)\n",
    "                    ratings=factor_model.fit(train)\n",
    "                    predict=ratings.transform(test)\n",
    "                    rmse = evaluator.evaluate(predict)\n",
    "                    print(rmse)\n",
    "                    rmse_dict[rmse]=f'rank={rank},maxIter={maxIter},RegParam={regParam}, rank={rank},numblocks={numblock},interval={checkpoint}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "factor_model = ALS(itemCol='movieId',userCol='userId',ratingCol='rating',nonnegative=True,\n",
    "                                       rank=20, maxIter=11, numUserBlocks=15, numItemBlocks=15,\n",
    "                                       checkpointInterval=20,regParam= .2)\n",
    "ratings=factor_model.fit(train)\n",
    "predict=ratings.transform(test)\n",
    "rmse = evaluator.evaluate(predict)\n",
    "rmse_dict[rmse]=ratings.extractParamMap()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings=factor_model.fit(train)\n",
    "predict=ratings.transform(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9030821184249294\n",
      "{Param(parent='ALS_e30d4a146a06', name='coldStartStrategy', doc='strategy for dealing with unknown or new users/items at prediction time. This may be useful in cross-validation or production scenarios, for handling user/item ids the model has not seen in the training data. Supported values: nan,drop.'): 'drop', Param(parent='ALS_e30d4a146a06', name='itemCol', doc='column name for item ids. Ids must be within the integer value range.'): 'movieId', Param(parent='ALS_e30d4a146a06', name='predictionCol', doc='prediction column name'): 'prediction', Param(parent='ALS_e30d4a146a06', name='userCol', doc='column name for user ids. Ids must be within the integer value range.'): 'userId'}\n"
     ]
    }
   ],
   "source": [
    "evaluator = RegressionEvaluator(metricName=\"rmse\", labelCol=\"rating\",\n",
    "                                predictionCol=\"prediction\")\n",
    "rmse = evaluator.evaluate(predict)\n",
    "print(rmse)\n",
    "print(ratings.extractParamMap())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "{Param(parent='ALS_e30d4a146a06', name='coldStartStrategy', \n",
    "       doc='strategy for dealing with unknown or new users/items at prediction time. \n",
    "       This may be useful in cross-validation or production scenarios, for handling user/item ids \n",
    "       the model has not seen in the training data. Supported values: nan,drop.'): 'drop', \n",
    "       Param(parent='ALS_e30d4a146a06', name='itemCol', doc='column name for item ids. \n",
    "             Ids must be within the integer value range.'): 'movieId',\n",
    "             Param(parent='ALS_e30d4a146a06', name='predictionCol', doc='prediction column name'):\n",
    "             'prediction', \n",
    "             Param(parent='ALS_e30d4a146a06', name='userCol', \n",
    "                   doc='column name for user ids. Ids must be within the integer value range.'): \n",
    " 'userId'}"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
